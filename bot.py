import discord
from discord.ext import commands
from discord import app_commands 
import json
import os
from dotenv import load_dotenv
import asyncio
from aiohttp import web
import hmac
import hashlib
import time

# ‡πÇ‡∏´‡∏•‡∏î Environment Variables
load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
DASHBOARD_CHANNEL_ID = int(os.getenv("DASHBOARD_CHANNEL_ID"))
GITHUB_WEBHOOK_SECRET = os.getenv("GITHUB_WEBHOOK_SECRET")

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot
intents = discord.Intents.default()
intents.message_content = True 
bot = commands.Bot(command_prefix="!", intents=intents) 

# ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session
try:
    with open("session.json", "r") as f:
        session_data = json.load(f)
except FileNotFoundError:
    session_data = {}

# --------------------------------------------------------------------------------
# Webhook Helper Functions (‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á GitHub Webhook - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
# --------------------------------------------------------------------------------

def verify_signature(request_body, signature):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Ç‡∏≠‡∏á GitHub webhook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á request"""
    if not GITHUB_WEBHOOK_SECRET:
        print("ERROR: GITHUB_WEBHOOK_SECRET is not set.")
        return False
        
    mac = hmac.new(GITHUB_WEBHOOK_SECRET.encode(), msg=request_body, digestmod=hashlib.sha256)
    expected = "sha256=" + mac.hexdigest()
    return hmac.compare_digest(expected, signature)

async def update_github_embed(payload, bot_client):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Discord Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GitHub"""
    await bot_client.wait_until_ready()
    channel = bot_client.get_channel(DASHBOARD_CHANNEL_ID)
    
    if channel is None:
        print(f"ERROR: Dashboard channel with ID {DASHBOARD_CHANNEL_ID} not found.")
        return

    try:
        embed = discord.Embed(title="üì¶ GitHub Repo Status", color=0x3498db)

        repo_name = payload["repository"]["name"]
        branch = payload.get("ref", "unknown/ref").split("/")[-1] 
        last_commit = payload["head_commit"]["message"]
        author = payload["head_commit"]["author"]["name"]
        commit_url = payload["head_commit"]["url"]

        embed.add_field(name="Repo", value=repo_name, inline=False)
        embed.add_field(name="Branch", value=branch, inline=True)
        embed.add_field(name="Last Commit", value=f"[üìù {last_commit} by {author}]({commit_url})", inline=False)
        
        embed.add_field(name="PRs Open", value="üîÑ 2", inline=True)
        embed.add_field(name="Issues Open", value="‚ö†Ô∏è 3", inline=True)

        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="View Repository", url=payload["repository"]["html_url"], style=discord.ButtonStyle.link))
        
        await channel.send(embed=embed, view=view)
        print(f"Successfully sent GitHub notification for push on branch {branch}")

    except Exception as e:
        print(f"Error processing or sending GitHub embed: {e}")

# --------------------------------------------------------------------------------
# Aiohttp application setup (‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Webhook Server - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
# --------------------------------------------------------------------------------
webhook_app = web.Application()

async def handle_webhook(request):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà /webhook"""
    body = await request.read()
    signature = request.headers.get("X-Hub-Signature-256")
    
    if not signature or not verify_signature(body, signature):
        print("Webhook received with Invalid signature.")
        return web.Response(status=401, text="Invalid signature")

    event = request.headers.get("X-GitHub-Event")
    
    try:
        payload = json.loads(body)
    except json.JSONDecodeError:
        print("Failed to decode webhook JSON payload.")
        return web.Response(status=400, text="Invalid JSON")

    if event == "push" and payload.get("ref", "").startswith("refs/heads/"):
        asyncio.create_task(update_github_embed(payload, bot))
        print(f"Received and scheduled push event for repo {payload['repository']['name']}")
    else:
        print(f"Received GitHub event: {event}. Ignoring.")

    return web.Response(text="OK")

# ‡∏ú‡∏π‡∏Å handler ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á /webhook
webhook_app.router.add_post("/webhook", handle_webhook)

# -------- Aiohttp Server Startup Function --------
async def start_webhook_server():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Aiohttp server ‡∏ö‡∏ô PORT ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢ environment variable"""
    port = int(os.environ.get("PORT", 5000))
    runner = web.AppRunner(webhook_app)
    await runner.setup()
    site = web.TCPSite(runner, host='0.0.0.0', port=port) 
    
    print(f"üöÄ Starting Aiohttp Webhook Server on 0.0.0.0:{port}...")
    try:
        await site.start()
    except Exception as e:
        print(f"FATAL: Failed to start web server on port {port}. Error: {e}")

# --------------------------------------------------------------------------------
# Events and Command Sync (‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Event - ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
# --------------------------------------------------------------------------------
@bot.event
async def on_ready():
    print(f'ü§ñ Logged in as {bot.user} (ID: {bot.user.id})')
    
    # *** ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands (Sync) ***
    try:
        synced = await bot.tree.sync() 
        print(f"‚ú® Synced {len(synced)} global command(s).")
    except Exception as e:
        print(f"‚ùå Error syncing commands: {e}")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Webhook server ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Bot
    bot.loop.create_task(start_webhook_server())


# --------------------------------------------------------------------------------
# Slash Command: /session (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Ephemeral)
# --------------------------------------------------------------------------------

# --- Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Options ‡∏Ç‡∏≠‡∏á /session ---
class SessionAction(discord.app_commands.Choice):
    def __init__(self, name: str, value: str):
        super().__init__(name=name, value=value)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Slash Command Group
@bot.tree.command(name="session", description="<a:67c3e29969174247b000f7c7318660f:1423939328928780338> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Live Share Session ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°")
@app_commands.describe(
    action="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: start, status ‡∏´‡∏£‡∏∑‡∏≠ end",
    link="‡∏•‡∏¥‡∏á‡∏Å‡πå Live Share (‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö action: start)",
)
@app_commands.choices(action=[
    SessionAction(name="‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Share Session", value="start"),
    SessionAction(name="‚ÑπÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value="status"),
    SessionAction(name="‚èπÔ∏è ‡∏õ‡∏¥‡∏î Session ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤", value="end")
])
async def session_command(interaction: discord.Interaction, action: str, link: str = None):
    
    # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_name = interaction.user.display_name 

    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Channel ID
    if interaction.channel_id != DASHBOARD_CHANNEL_ID:
        await interaction.response.send_message("<a:809832006988988486:1423939345026388008> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á #live-share-dashboard ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        return

    channel = bot.get_channel(DASHBOARD_CHANNEL_ID)

    if action == "start":
        if not link:
            await interaction.response.send_message("<a:809832006988988486:1423939345026388008> ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå Live Share ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ /session start", ephemeral=True)
            return
            
        # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        session_data["link"] = link
        session_data["participants"] = [user_name] 
        session_data["start_time"] = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
        session_data["end_time"] = None
        with open("session.json", "w") as f:
            json.dump(session_data, f)
        
        # *** ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Ephemeral ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö START (‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå) ***
        # ‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥: <a:45696190630e4f208144d0582a0b0414:1423939335928938506:>
        ephemeral_message = (
            f"<a:45696190630e4f208144d0582a0b0414:1423939335928938506:> **Session ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!**\n"
            f"**‡πÇ‡∏Æ‡∏™‡∏ï‡πå:** {user_name} (‡∏Ñ‡∏∏‡∏ì)\n"
            f"‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        )
        await interaction.response.send_message(ephemeral_message, ephemeral=True)

        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå Embed (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ - ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå)
        embed = discord.Embed(title="<a:67c3e29969174247b000f7c7318660f:1423939328928780338> VS Code Live Share Session Started! <a:67c3e29969174247b000f7c7318660f:1423939328928780338>",
                              description="Session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
                              color=0x3498db)
        embed.add_field(name="Session Link", value=f"[<a:138303skullz:1423938938913165385> ‡∏Å‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°]({link})", inline=False)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° Session", value=user_name, inline=True)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data["start_time"], inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=", ".join(session_data["participants"]), inline=False)
        
        await channel.send(embed=embed)
        
    elif action == "status":
        if not session_data.get("link"):
            await interaction.response.send_message("<a:809832006988988486:1423939345026388008> ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ Live Share Session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà", ephemeral=True)
            return

        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Ephemeral - ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏î‡πâ)
        embed = discord.Embed(title="‚ÑπÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Live Share Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
                              description=f"‚úÖ Session ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∏‡∏ì: {user_name})", # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                              color=0xf39c12)
        embed.add_field(name="Session Link", value=f"[<a:138303skullz:1423938938913165385> ‡∏•‡∏¥‡∏á‡∏Å‡πå Session]({session_data.get('link','-')})", inline=False)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data.get("start_time","-"), inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value=", ".join(session_data.get("participants",[])) or "(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)", inline=False)
        
        # 2. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Embed (Ephemeral)
        await interaction.response.send_message(embed=embed, ephemeral=True) 

    elif action == "end":
        if not session_data.get("link"):
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Live Share Session ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î", ephemeral=True)
            return
            
        end_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
        
        # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        try:
            start_t = time.mktime(time.strptime(session_data["start_time"], "%Y-%m-%d %H:%M:%S"))
            end_t = time.mktime(time.strptime(end_time_str, "%Y-%m-%d %H:%M:%S"))
            duration_sec = end_t - start_t
            hours = int(duration_sec // 3600)
            minutes = int((duration_sec % 3600) // 60)
            duration_text = f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ"
        except:
            duration_text = "-"
        
        # 2. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session
        session_data.clear()
        with open("session.json", "w") as f:
            json.dump(session_data, f)
        
        # *** ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Ephemeral ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö END (‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå) ***
        # ‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥: <a:45696190630e4f208144d0582a0b0414:1423939335928938506:>
        ephemeral_message = (
            f"<a:45696190630e4f208144d0582a0b0414:1423939335928938506:> **Session ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß!**\n"
            f"**‡∏ú‡∏π‡πâ‡∏õ‡∏¥‡∏î Session:** {user_name} (‡∏Ñ‡∏∏‡∏ì)\n"
            f"‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        )
        await interaction.response.send_message(ephemeral_message, ephemeral=True)

        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏£‡∏∏‡∏õ (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ - ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå)
        embed = discord.Embed(title="<a:810020134865338368:1423938901671804968:> Live Share Session Ended",
                              description="Session ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°!",
                              color=0xe74c3c)
        embed.add_field(name="Session Link", value=f"[<a:138303skullz:1423938938913165385> ‡∏•‡∏¥‡∏á‡∏Å‡πå Session ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤]({session_data.get('link','-')})", inline=False)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data.get("start_time","-"), inline=True)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=end_time_str, inline=True)
        embed.add_field(name="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", value=duration_text, inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value=", ".join(session_data.get("participants",[])) or "(‡πÑ‡∏°‡πà‡∏°‡∏µ)", inline=False)

        await channel.send(embed=embed)


# --------------------------------------------------------------------------------
# Run Bot
# --------------------------------------------------------------------------------
bot.run(TOKEN)
