import discord
from discord.ext import commands
from discord import app_commands 
import json
import os
from dotenv import load_dotenv
import asyncio
from aiohttp import web
import hmac
import hashlib
import time

# ‡πÇ‡∏´‡∏•‡∏î Environment Variables
load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
DASHBOARD_CHANNEL_ID = int(os.getenv("DASHBOARD_CHANNEL_ID")) 
GITHUB_WEBHOOK_SECRET = os.getenv("GITHUB_WEBHOOK_SECRET")

# ************************************************
# ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î Role ID ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà!
# ************************************************
# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /announce ‡πÑ‡∏î‡πâ
# ‡πÄ‡∏ä‡πà‡∏ô [987654321098765432, 123456789012345678]
ALLOWED_ANNOUNCER_ROLES = [
    1423975320821829683
]
# ************************************************

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot
intents = discord.Intents.default()
intents.message_content = True 
bot = commands.Bot(command_prefix="!", intents=intents) 

# ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session
try:
    with open("session.json", "r") as f:
        session_data = json.load(f)
except FileNotFoundError:
    session_data = {}

# --------------------------------------------------------------------------------
# Webhook ‡πÅ‡∏•‡∏∞ Startup (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
# --------------------------------------------------------------------------------

def verify_signature(request_body, signature):
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
    if not GITHUB_WEBHOOK_SECRET:
        print("ERROR: GITHUB_WEBHOOK_SECRET is not set.")
        return False
        
    mac = hmac.new(GITHUB_WEBHOOK_SECRET.encode(), msg=request_body, digestmod=hashlib.sha256)
    expected = "sha256=" + mac.hexdigest()
    return hmac.compare_digest(expected, signature)

async def update_github_embed(payload, bot_client):
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
    await bot_client.wait_until_ready()
    channel = bot_client.get_channel(DASHBOARD_CHANNEL_ID)
    
    if channel is None:
        print(f"ERROR: Dashboard channel with ID {DASHBOARD_CHANNEL_ID} not found.")
        return

    try:
        embed = discord.Embed(title="üì¶ GitHub Repo Status", color=0x3498db)
        repo_name = payload["repository"]["name"]
        branch = payload.get("ref", "unknown/ref").split("/")[-1] 
        last_commit = payload["head_commit"]["message"]
        author = payload["head_commit"]["author"]["name"]
        commit_url = payload["head_commit"]["url"]

        embed.add_field(name="Repo", value=repo_name, inline=False)
        embed.add_field(name="Branch", value=branch, inline=True)
        embed.add_field(name="Last Commit", value=f"[üìù {last_commit} by {author}]({commit_url})", inline=False)
        embed.add_field(name="PRs Open", value="üîÑ 2", inline=True)
        embed.add_field(name="Issues Open", value="‚ö†Ô∏è 3", inline=True)

        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="View Repository", url=payload["repository"]["html_url"], style=discord.ButtonStyle.link))
        
        await channel.send(embed=embed, view=view)
        print(f"Successfully sent GitHub notification for push on branch {branch}")

    except Exception as e:
        print(f"Error processing or sending GitHub embed: {e}")

webhook_app = web.Application()

async def handle_webhook(request):
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
    body = await request.read()
    signature = request.headers.get("X-Hub-Signature-256")
    
    if not signature or not verify_signature(body, signature):
        print("Webhook received with Invalid signature.")
        return web.Response(status=401, text="Invalid signature")

    event = request.headers.get("X-GitHub-Event")
    
    try:
        payload = json.loads(body)
    except json.JSONDecodeError:
        print("Failed to decode webhook JSON payload.")
        return web.Response(status=400, text="Invalid JSON")

    if event == "push" and payload.get("ref", "").startswith("refs/heads/"):
        asyncio.create_task(update_github_embed(payload, bot))
        print(f"Received and scheduled push event for repo {payload['repository']['name']}")
    else:
        print(f"Received GitHub event: {event}. Ignoring.")

    return web.Response(text="OK")

webhook_app.router.add_post("/webhook", handle_webhook)

async def start_webhook_server():
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
    port = int(os.environ.get("PORT", 5000))
    runner = web.AppRunner(webhook_app)
    await runner.setup()
    site = web.TCPSite(runner, host='0.0.0.0', port=port) 
    
    print(f"üöÄ Starting Aiohttp Webhook Server on 0.0.0.0:{port}...")
    try:
        await site.start()
    except Exception as e:
        print(f"FATAL: Failed to start web server on port {port}. Error: {e}")

@bot.event
async def on_ready():
    print(f'ü§ñ Logged in as {bot.user} (ID: {bot.user.id})')
    try:
        synced = await bot.tree.sync() 
        print(f"‚ú® Synced {len(synced)} global command(s).")
    except Exception as e:
        print(f"‚ùå Error syncing commands: {e}")
    
    bot.loop.create_task(start_webhook_server())

# --------------------------------------------------------------------------------
# NEW: Slash Command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (Modal) - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
# --------------------------------------------------------------------------------

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° is_owner ‡πÅ‡∏•‡∏∞ has_any_role
def is_announcer(interaction: discord.Interaction) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Guild Owner ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Guild Owner ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏´‡∏±‡∏ß‡∏î‡∏¥‡∏™)
    if interaction.guild and interaction.user.id == interaction.guild.owner_id:
        return True
    
    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ALLOWED_ANNOUNCER_ROLES:
        user_role_ids = [role.id for role in interaction.user.roles]
        if any(role_id in user_role_ids for role_id in ALLOWED_ANNOUNCER_ROLES):
            return True
            
    return False

# 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Modal Class (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
class AnnouncementModal(discord.ui.Modal, title='üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå'):
    
    # Text Input 1: Title (‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)
    title_input = discord.ui.TextInput(
        label='‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (Title)',
        placeholder='‡∏™‡∏£‡∏∏‡∏õ Live Session ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå / ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏û‡∏ï‡∏ä‡πå‡πÉ‡∏´‡∏°‡πà',
        max_length=256,
        required=True
    )
    
    # Text Input 2: Description (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤)
    description_input = discord.ui.TextInput(
        label='‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Markdown)',
        placeholder='‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...',
        style=discord.TextStyle.paragraph, # ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà
        required=True
    )

    # Text Input 3: Image URL (‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    image_url_input = discord.ui.TextInput(
        label='‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Image URL - ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)',
        placeholder='‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏à‡∏ö‡∏î‡πâ‡∏ß‡∏¢ .png, .jpg, .gif ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
        max_length=2000,
        required=False
    )

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Submit
    async def on_submit(self, interaction: discord.Interaction):
        title = self.title_input.value
        description = self.description_input.value
        image_url = self.image_url_input.value
        
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed
        embed = discord.Embed(
            title=f"üì¢ {title}",
            description=description,
            color=discord.Color.blue()
        )
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Footer 
        embed.set_footer(text=f"‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢: {interaction.user.display_name}", 
                         icon_url=interaction.user.display_avatar.url)
        
        # 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        valid_image_url = False
        if image_url and image_url.startswith('http') and (image_url.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp'))):
            embed.set_image(url=image_url)
            valid_image_url = True

        # 3.1 ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á (Defer) ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        await interaction.response.defer(thinking=True, ephemeral=True)
        
        # 3.2 ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Ping Role
        message_content = f"üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å **{interaction.user.display_name}**!"
        # ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô message_content ‡πÄ‡∏õ‡πá‡∏ô "@everyone" ‡∏´‡∏£‡∏∑‡∏≠ "@here" ‡∏Å‡πá‡πÑ‡∏î‡πâ

        # 3.3 ‡πÇ‡∏û‡∏™‡∏ï‡πå Embed ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞: ‡πÉ‡∏ä‡πâ FOLLOWUP
        await interaction.followup.send(content=message_content, embed=embed)
        
        # 3.4 ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Ephemeral) ‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        success_message = "‚úÖ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"
        if image_url and not valid_image_url:
             success_message += "\n‚ö†Ô∏è ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå URL ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå) - ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"

        await interaction.edit_original_response(content=success_message)

    async def on_error(self, interaction: discord.Interaction, error: Exception) -> None:
        await interaction.followup.send(f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®: {error}', ephemeral=True)


# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Slash Command ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Modal - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå!
@bot.tree.command(name="announce", description="üì¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö Embed ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)")
# *** ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏ä‡πâ Check function ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á ***
@app_commands.check(is_announcer)
async def announce_command(interaction: discord.Interaction):
    # ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await interaction.response.send_modal(AnnouncementModal())

# 3. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Check Funtion
@announce_command.error
async def announce_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CheckFailure):
        await interaction.response.send_message(
            "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ô‡∏µ‡πâ. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", 
            ephemeral=True
        )
    else:
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà CheckFailure
        print(f"Error in announce_command: {error}")
        await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á.", ephemeral=True)


# --------------------------------------------------------------------------------
# Slash Command: /session (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
# --------------------------------------------------------------------------------

# ... (‡πÇ‡∏Ñ‡πâ‡∏î /session command ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà) ...

# --- Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Options ‡∏Ç‡∏≠‡∏á /session ---
class SessionAction(discord.app_commands.Choice):
    def __init__(self, name: str, value: str):
        super().__init__(name=name, value=value)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Slash Command Group
@bot.tree.command(name="session", description="<a:67c3e29969174247b000f7c7318660f:1423939328928780338> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Live Share Session ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°")
@app_commands.describe(
    action="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: start, status ‡∏´‡∏£‡∏∑‡∏≠ end",
    link="‡∏•‡∏¥‡∏á‡∏Å‡πå Live Share (‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö action: start)",
)
@app_commands.choices(action=[
    SessionAction(name="‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Share Session", value="start"),
    SessionAction(name="‚ÑπÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value="status"),
    SessionAction(name="‚èπÔ∏è ‡∏õ‡∏¥‡∏î Session ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤", value="end")
])
async def session_command(interaction: discord.Interaction, action: str, link: str = None):
    
    # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_name = interaction.user.display_name 

    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Channel ID
    if interaction.channel_id != DASHBOARD_CHANNEL_ID:
        await interaction.response.send_message("<a:809832006988988486:1423939345026388008> ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á #live-share-dashboard ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        return

    if action == "start":
        if not link:
            await interaction.response.send_message("<a:809832006988988486:1423939345026388008> ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå Live Share ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ /session start", ephemeral=True)
            return
            
        # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        session_data["link"] = link
        session_data["participants"] = [user_name] 
        session_data["start_time"] = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
        session_data["end_time"] = None
        session_data["last_message_id"] = None 
        with open("session.json", "w") as f:
            json.dump(session_data, f)
        
        # 1. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Ephemeral
        ephemeral_message = (
            f"<a:45696190630e4f208144d0582a0b0414:1423939335928938506> **Session ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!**\n"
            f"**‡πÇ‡∏Æ‡∏™‡∏ï‡πå:** {user_name} (‡∏Ñ‡∏∏‡∏ì)\n"
            f"‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        )
        await interaction.response.send_message(ephemeral_message, ephemeral=True)

        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
        embed = discord.Embed(title="<a:67c3e29969174247b000f7c7318660f:1423939328928780338> VS Code Live Share Session Started! üöÄ",
                              description="Session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
                              color=0x3498db)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° Session", value=user_name, inline=True)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data["start_time"], inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=", ".join(session_data["participants"]), inline=False)
        
        # ‡πÉ‡∏ä‡πâ Unicode Emoji üîó
        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="üñ±Ô∏è: ÃóÃÄ‚ûõ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Session (LIVE)", url=link, style=discord.ButtonStyle.green)) 
        
        # 3. ‡πÇ‡∏û‡∏™‡∏ï‡πå Embed ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞: ‡πÉ‡∏ä‡πâ FOLLOWUP
        sent_message = await interaction.followup.send(embed=embed, view=view, wait=True)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        session_data["last_message_id"] = sent_message.id
        with open("session.json", "w") as f:
            json.dump(session_data, f)

        
    elif action == "status":
        if not session_data.get("link"):
            await interaction.response.send_message("<a:809832006988988486:1423939345026388008> ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ Live Share Session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà", ephemeral=True)
            return

        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 
        embed = discord.Embed(title="<a:1249347622158860308:1422185419491246101> ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Live Share Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
                              description=f"<a:2a3404eb19f54b10b16e83768f5937ae:1423939322947829841> Session ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∏‡∏ì: {user_name})",
                              color=0xf39c12)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data.get("start_time","-"), inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value=", ".join(session_data.get("participants",[])) or "(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)", inline=False)
        
        # ‡πÉ‡∏ä‡πâ Unicode Emoji üîó
        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", url=session_data.get('link','-'), style=discord.ButtonStyle.green))

        # 2. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Embed (Ephemeral)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True) 

    elif action == "end":
        if not session_data.get("link"):
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Live Share Session ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î", ephemeral=True)
            return
            
        end_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
        current_link = session_data.get("link") 
        current_message_id = session_data.get("last_message_id")
        current_participants = session_data.get("participants", [])
        current_start_time = session_data.get("start_time", "-")
        
        # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        try:
            start_t = time.mktime(time.strptime(current_start_time, "%Y-%m-%d %H:%M:%S"))
            end_t = time.mktime(time.strptime(end_time_str, "%Y-%m-%d %H:%M:%S"))
            duration_sec = end_t - start_t
            hours = int(duration_sec // 3600)
            minutes = int((duration_sec % 3600) // 60)
            duration_text = f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ"
        except:
            duration_text = "-"
        
        # 2. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session
        session_data.clear()
        with open("session.json", "w") as f:
            json.dump(session_data, f)
        
        # 3. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Ephemeral
        ephemeral_message = (
            f"<a:45696190630e4f208144d0582a0b0414:1423939335928938506> **Session ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß!**\n"
            f"**‡∏ú‡∏π‡πâ‡∏õ‡∏¥‡∏î Session:** {user_name} (‡∏Ñ‡∏∏‡∏ì)\n"
            f"‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        )
        await interaction.response.send_message(ephemeral_message, ephemeral=True)

        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏£‡∏∏‡∏õ
        embed = discord.Embed(title="<a:810020134865338368:1423938901671804968> Live Share Session Ended",
                              description="Session ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°!",
                              color=0xe74c3c)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=current_start_time, inline=True)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=end_time_str, inline=True)
        embed.add_field(name="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", value=duration_text, inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value=", ".join(current_participants) or "(‡πÑ‡∏°‡πà‡∏°‡∏µ)", inline=False)

        # ‡πÉ‡∏ä‡πâ Unicode Emoji üîó
        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå Session ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤", url=current_link, style=discord.ButtonStyle.secondary))

        # 5. ‡πÇ‡∏û‡∏™‡∏ï‡πå Embed ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞: ‡πÉ‡∏ä‡πâ FOLLOWUP
        await interaction.followup.send(embed=embed, view=view)
        
        # 6. ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 'START' ‡πÄ‡∏î‡∏¥‡∏°
        if current_message_id:
            try:
                channel_obj = bot.get_channel(DASHBOARD_CHANNEL_ID)
                if channel_obj:
                    old_message = await channel_obj.fetch_message(current_message_id)
                    old_embed = old_message.embeds[0]
                    old_embed.title = "<a:67c3e29969174247b000f7c7318660f:1423939328928780338> VS Code Live Share Session Started! (Finished)" 
                    old_embed.description = "Session ‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á"
                    
                    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å (view=None)
                    await old_message.edit(embed=old_embed, view=None) 
            except discord.NotFound:
                print(f"Warning: Original START message with ID {current_message_id} not found for editing.")


# --------------------------------------------------------------------------------
# Run Bot
# --------------------------------------------------------------------------------
bot.run(TOKEN)
