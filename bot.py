import discord
from discord.ext import commands
from discord import app_commands
import json
import os
from dotenv import load_dotenv
import asyncio
from aiohttp import web
import hmac
import hashlib
import time
import urllib.parse
import datetime
import pytz

# ‡πÇ‡∏´‡∏•‡∏î Environment Variables
load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
# ************************************************
# ‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‚ö†Ô∏è
# ************************************************
# ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î CHANNEL ID ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
DASHBOARD_CHANNEL_ID = int(os.getenv("DASHBOARD_CHANNEL_ID")) 
# ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î Secret Key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö GitHub Webhook
GITHUB_WEBHOOK_SECRET = os.getenv("GITHUB_WEBHOOK_SECRET") 

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /announce ‡πÑ‡∏î‡πâ
# ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤
ALLOWED_ANNOUNCER_ROLES = [
    1423975320821829683, # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Role ID
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° Role ID ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
]
# ************************************************

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session
try:
    with open("session.json", "r") as f:
        session_data = json.load(f)
except FileNotFoundError:
    session_data = {}

# --------------------------------------------------------------------------------
## Timezone Helper Function
# --------------------------------------------------------------------------------

def get_bkk_time():
    """‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ Asia/Bangkok"""
    bkk_timezone = pytz.timezone('Asia/Bangkok')
    now = datetime.datetime.now(bkk_timezone)
    # ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° Timezone Info
    return now.strftime("%Y-%m-%d %H:%M:%S")

# --------------------------------------------------------------------------------
## GitHub Webhook Helper Functions
# --------------------------------------------------------------------------------

def verify_signature(request_body, signature):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Ç‡∏≠‡∏á GitHub webhook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á request"""
    if not GITHUB_WEBHOOK_SECRET:
        print("ERROR: GITHUB_WEBHOOK_SECRET is not set.")
        return False

    mac = hmac.new(GITHUB_WEBHOOK_SECRET.encode(), msg=request_body, digestmod=hashlib.sha256)
    expected = "sha256=" + mac.hexdigest()
    return hmac.compare_digest(expected, signature)

async def update_github_embed(payload, bot_client):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Discord Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GitHub"""
    await bot_client.wait_until_ready()
    channel = bot_client.get_channel(DASHBOARD_CHANNEL_ID)

    if channel is None:
        print(f"ERROR: Dashboard channel with ID {DASHBOARD_CHANNEL_ID} not found.")
        return

    try:
        embed = discord.Embed(title="üì¶ GitHub Repo Status", color=0x3498db)
        repo_name = payload["repository"]["name"]
        branch = payload.get("ref", "unknown/ref").split("/")[-1]
        last_commit = payload["head_commit"]["message"]
        author = payload["head_commit"]["author"]["name"]
        commit_url = payload["head_commit"]["url"]

        embed.add_field(name="Repo", value=repo_name, inline=False)
        embed.add_field(name="Branch", value=branch, inline=True)
        embed.add_field(name="Last Commit", value=f"[üìù {last_commit} by {author}]({commit_url})", inline=False)
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á
        embed.add_field(name="PRs Open", value="üîÑ 2", inline=True)
        embed.add_field(name="Issues Open", value="‚ö†Ô∏è 3", inline=True)

        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="View Repository", url=payload["repository"]["html_url"], style=discord.ButtonStyle.link))

        await channel.send(embed=embed, view=view)
        print(f"Successfully sent GitHub notification for push on branch {branch}")

    except Exception as e:
        print(f"Error processing or sending GitHub embed: {e}")

# --------------------------------------------------------------------------------
## Aiohttp application setup (Webhook Server)
# --------------------------------------------------------------------------------
webhook_app = web.Application()

async def handle_webhook(request):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà /webhook"""
    body = await request.read()
    signature = request.headers.get("X-Hub-Signature-256")

    if not signature or not verify_signature(body, signature):
        print("Webhook received with Invalid signature.")
        return web.Response(status=401, text="Invalid signature")

    event = request.headers.get("X-GitHub-Event")

    try:
        payload = json.loads(body)
    except json.JSONDecodeError:
        print("Failed to decode webhook JSON payload.")
        return web.Response(status=400, text="Invalid JSON")

    if event == "push" and payload.get("ref", "").startswith("refs/heads/"):
        asyncio.create_task(update_github_embed(payload, bot))
        print(f"Received and scheduled push event for repo {payload['repository']['name']}")
    else:
        print(f"Received GitHub event: {event}. Ignoring.")

    return web.Response(text="OK")

# ‡∏ú‡∏π‡∏Å handler ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á /webhook
webhook_app.router.add_post("/webhook", handle_webhook)

# -------- Aiohttp Server Startup Function --------
async def start_webhook_server():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Aiohttp server ‡∏ö‡∏ô PORT ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢ environment variable"""
    # Render ‡∏à‡∏∞‡πÉ‡∏ä‡πâ PORT ‡∏à‡∏≤‡∏Å Environment Variable
    port = int(os.environ.get("PORT", 5000)) 
    runner = web.AppRunner(webhook_app)
    await runner.setup()
    site = web.TCPSite(runner, host='0.0.0.0', port=port)

    print(f"üöÄ Starting Aiohttp Webhook Server on 0.0.0.0:{port}...")
    try:
        await site.start()
    except Exception as e:
        print(f"FATAL: Failed to start web server on port {port}. Error: {e}")

# --------------------------------------------------------------------------------
## Bot Events and Command Sync
# --------------------------------------------------------------------------------
@bot.event
async def on_ready():
    print(f'ü§ñ Logged in as {bot.user} (ID: {bot.user.id})')

    try:
        synced = await bot.tree.sync()
        print(f"‚ú® Synced {len(synced)} global command(s).")
    except Exception as e:
        print(f"‚ùå Error syncing commands: {e}")

    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Webhook server ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Bot
    bot.loop.create_task(start_webhook_server())

# --------------------------------------------------------------------------------
## Slash Command: /announce (REVISED: All Fields Optional)
# --------------------------------------------------------------------------------

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° is_owner ‡πÅ‡∏•‡∏∞ has_any_role
def is_announcer(interaction: discord.Interaction) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Guild Owner ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Guild Owner ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏´‡∏±‡∏ß‡∏î‡∏¥‡∏™)
    if interaction.guild and interaction.user.id == interaction.guild.owner_id:
        return True

    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ALLOWED_ANNOUNCER_ROLES and interaction.guild:
        user_role_ids = [role.id for role in interaction.user.roles]
        if any(role_id in user_role_ids for role_id in ALLOWED_ANNOUNCER_ROLES):
            return True

    return False

# 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Modal Class ‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô Optional
class AnnouncementModal(discord.ui.Modal, title='üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå'):

    # Text Input 1: Title (‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á) - OPTIONAL
    title_input = discord.ui.TextInput(
        label='‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (Title) - ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö',
        placeholder='‡∏™‡∏£‡∏∏‡∏õ Live Session ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå / ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏û‡∏ï‡∏ä‡πå‡πÉ‡∏´‡∏°‡πà',
        max_length=256,
        required=False
    )

    # Text Input 2: Description (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤) - OPTIONAL
    description_input = discord.ui.TextInput(
        label='‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Markdown) - ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö',
        placeholder='‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...',
        style=discord.TextStyle.paragraph,
        required=False
    )

    # Text Input 3: Image URL (‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û) - OPTIONAL
    image_url_input = discord.ui.TextInput(
        label='‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Image URL - ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)',
        placeholder='‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏à‡∏ö‡∏î‡πâ‡∏ß‡∏¢ .png, .jpg, .gif, .webp ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
        max_length=2000,
        required=False
    )

    # Text Input 4: Mention Choice (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Mention) - OPTIONAL
    mention_input = discord.ui.TextInput(
        label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å (@everyone, Role ID/‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó) - ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö',
        placeholder='@everyone, @testers, 1423975320821829683',
        max_length=100,
        required=False
    )

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Submit
    async def on_submit(self, interaction: discord.Interaction):
        title = self.title_input.value or ""
        description = self.description_input.value or ""
        image_url = self.image_url_input.value or ""
        mention_choice = self.mention_input.value.strip() or ""

        # 0. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Embed ‡∏´‡∏£‡∏∑‡∏≠ Mention ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not title.strip() and not description.strip() and not image_url.strip() and not mention_choice.strip():
             await interaction.response.send_message("‚ùå **‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å **‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á** ‡∏´‡∏£‡∏∑‡∏≠ **‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤** ‡∏´‡∏£‡∏∑‡∏≠ **‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û** ‡∏´‡∏£‡∏∑‡∏≠ **‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å** ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á", ephemeral=True)
             return

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Title ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å
        display_title = title.strip() if title.strip() else "üì¢ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå"

        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠ Title ‡∏™‡∏≥‡∏£‡∏≠‡∏á)
        embed = discord.Embed(
            title=display_title,
            description=description.strip() or discord.Embed.Empty,
            color=discord.Color.red()
        )
        embed.set_footer(text=f"‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢: {interaction.user.display_name} | ‡πÄ‡∏ß‡∏•‡∏≤: {get_bkk_time()}",
                         icon_url=interaction.user.display_avatar.url)

        # 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        valid_image_url = False
        if image_url.strip() and image_url.strip().startswith('http'):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
            parsed_url = urllib.parse.urlparse(image_url.strip())
            if parsed_url.path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
                embed.set_image(url=image_url.strip())
                valid_image_url = True

        # 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mention
        message_content = ""
        mention_status = ""

        if mention_choice:
            # 3.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö @everyone / @here
            if mention_choice.lower() in ["@everyone", "@here"]:
                message_content = mention_choice
                mention_status = f"‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å: **{mention_choice}**"

            # 3.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Role ID ‡∏´‡∏£‡∏∑‡∏≠ Role Mention String ‡∏´‡∏£‡∏∑‡∏≠ Role Name
            else:
                role = None
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å ID/Mention String ‡∏Å‡πà‡∏≠‡∏ô
                try:
                    if mention_choice.startswith('<@&') and mention_choice.endswith('>'):
                        role_id = int(mention_choice[3:-1])
                        role = interaction.guild.get_role(role_id)
                    elif mention_choice.isdigit():
                         role_id = int(mention_choice)
                         role = interaction.guild.get_role(role_id)
                except ValueError:
                    pass

                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
                if not role:
                     role = discord.utils.get(interaction.guild.roles, name=mention_choice.lstrip('@'))

                if role:
                    message_content = role.mention
                    mention_status = f"‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å Role: **{role.name}**"
                else:
                    message_content = ""
                    mention_status = f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å: **{mention_choice}**"


        # 4. ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:
        await interaction.response.send_message("‚ú® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞...", ephemeral=True)

        # 4.2 ‡πÉ‡∏ä‡πâ followup ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
        try:
             # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á (‡∏û‡∏£‡πâ‡∏≠‡∏° embed ‡πÅ‡∏•‡∏∞ mention)
             # AllowedMentions(everyone=True, roles=True) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
             await interaction.followup.send(content=message_content, embed=embed, allowed_mentions=discord.AllowedMentions(everyone=True, roles=True), wait=True)
        except Exception as e:
             await interaction.edit_original_response(content=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå: {e}", embeds=[])
             return


        # 4.3 ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Ephemeral)
        success_message = "‚úÖ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"

        if mention_status:
             success_message += f"\n- {mention_status}"

        if image_url.strip() and not valid_image_url:
            success_message += "\n- ‚ö†Ô∏è ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
        elif image_url.strip() and valid_image_url:
             success_message += "\n- üñºÔ∏è ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"

        if not title.strip() and not description.strip() and not image_url.strip() and mention_choice.strip():
             success_message += "\n- üí¨ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"

        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Ephemeral ‡πÅ‡∏£‡∏Å
        await interaction.edit_original_response(content=success_message)


    async def on_error(self, interaction: discord.Interaction, error: Exception) -> None:
        await interaction.followup.send(f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®: {error}', ephemeral=True)


# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Slash Command ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Modal - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå!
@bot.tree.command(name="announce", description="üì¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö Embed ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)")
@app_commands.check(is_announcer)
async def announce_command(interaction: discord.Interaction):
    await interaction.response.send_modal(AnnouncementModal())

# 3. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Check Funtion
@announce_command.error
async def announce_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CheckFailure):
        await interaction.response.send_message(
            "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ô‡∏µ‡πâ. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
            ephemeral=True
        )
    else:
        print(f"Error in announce_command: {error}")
        await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á.", ephemeral=True)

# --------------------------------------------------------------------------------
## Slash Command: /session
# --------------------------------------------------------------------------------

# --- Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Options ‡∏Ç‡∏≠‡∏á /session ---
class SessionAction(discord.app_commands.Choice):
    def __init__(self, name: str, value: str):
        super().__init__(name=name, value=value)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Slash Command Group
@bot.tree.command(name="session", description="‚ñ∂Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Live Share Session ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°")
@app_commands.describe(
    action="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: start, status ‡∏´‡∏£‡∏∑‡∏≠ end",
    link="‡∏•‡∏¥‡∏á‡∏Å‡πå Live Share (‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö action: start)",
)
@app_commands.choices(action=[
    SessionAction(name="‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Share Session", value="start"),
    SessionAction(name="‚ÑπÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value="status"),
    SessionAction(name="‚èπÔ∏è ‡∏õ‡∏¥‡∏î Session ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤", value="end")
])
async def session_command(interaction: discord.Interaction, action: str, link: str = None):

    # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_name = interaction.user.display_name

    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Channel ID
    if interaction.channel_id != DASHBOARD_CHANNEL_ID:
        await interaction.response.send_message("‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á #live-share-dashboard ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        return

    if action == "start":
        if not link:
            await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå Live Share ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ /session start", ephemeral=True)
            return

        # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        session_data["link"] = link
        session_data["participants"] = [user_name]
        session_data["start_time"] = get_bkk_time()
        session_data["end_time"] = None
        session_data["last_message_id"] = None
        with open("session.json", "w") as f:
            json.dump(session_data, f)

        # 1. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Ephemeral
        ephemeral_message = (
            f"‚úÖ **Session ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!**\n"
            f"**‡πÇ‡∏Æ‡∏™‡∏ï‡πå:** {user_name} (‡∏Ñ‡∏∏‡∏ì)\n"
            f"‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        )
        await interaction.response.send_message(ephemeral_message, ephemeral=True)

        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
        embed = discord.Embed(title="‚ñ∂Ô∏è VS Code Live Share Session Started! ‚ñ∂Ô∏è",
                              description="Session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
                              color=0x3498db)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° Session", value=user_name, inline=True)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data["start_time"], inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=", ".join(session_data["participants"]), inline=False)

        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="üñ±Ô∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Session (LIVE)", url=link, style=discord.ButtonStyle.green))

        # 3. ‡πÇ‡∏û‡∏™‡∏ï‡πå Embed ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞: ‡πÉ‡∏ä‡πâ FOLLOWUP
        sent_message = await interaction.followup.send(embed=embed, view=view, wait=True)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        session_data["last_message_id"] = sent_message.id
        with open("session.json", "w") as f:
            json.dump(session_data, f)


    elif action == "status":
        if not session_data.get("link"):
            await interaction.response.send_message("‚ùå ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ Live Share Session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà", ephemeral=True)
            return

        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        embed = discord.Embed(title="‚ÑπÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Live Share Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
                              description=f"Session ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∏‡∏ì: {user_name})",
                              color=0xf39c12)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data.get("start_time","-"), inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value=", ".join(session_data.get("participants",[])) or "(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)", inline=False)

        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", url=session_data.get('link','-'), style=discord.ButtonStyle.green))

        # 2. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Embed (Ephemeral)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    elif action == "end":
        if not session_data.get("link"):
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Live Share Session ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î", ephemeral=True)
            return

        end_time_str = get_bkk_time()
        current_link = session_data.get("link")
        current_message_id = session_data.get("last_message_id")
        current_participants = session_data.get("participants", [])
        current_start_time = session_data.get("start_time", "-")

        # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Timezone)
        duration_text = "-"
        try:
            bkk_tz = pytz.timezone('Asia/Bangkok')
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô datetime object 
            start_dt = bkk_tz.localize(datetime.datetime.strptime(current_start_time, "%Y-%m-%d %H:%M:%S"))
            end_dt = bkk_tz.localize(datetime.datetime.strptime(end_time_str, "%Y-%m-%d %H:%M:%S"))
            
            time_difference = end_dt - start_dt
            
            duration_sec = time_difference.total_seconds()
            hours = int(duration_sec // 3600)
            minutes = int((duration_sec % 3600) // 60)
            
            if duration_sec < 0:
                 duration_text = "‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏à‡∏ö ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
            else:
                 duration_text = f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ"
                 
        except Exception as e:
            print(f"Error calculating duration: {e}")
            duration_text = "-"

        # 2. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session
        session_data.clear()
        with open("session.json", "w") as f:
            json.dump(session_data, f)

        # 3. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Ephemeral
        ephemeral_message = (
            f"‚úÖ **Session ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß!**\n"
            f"**‡∏ú‡∏π‡πâ‡∏õ‡∏¥‡∏î Session:** {user_name} (‡∏Ñ‡∏∏‡∏ì)\n"
            f"‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        )
        await interaction.response.send_message(ephemeral_message, ephemeral=True)

        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏£‡∏∏‡∏õ
        embed = discord.Embed(title="‚èπÔ∏è Live Share Session Ended",
                              description="Session ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°!",
                              color=0xe74c3c)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=current_start_time, inline=True)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=end_time_str, inline=True)
        embed.add_field(name="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", value=duration_text, inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value=", ".join(current_participants) or "(‡πÑ‡∏°‡πà‡∏°‡∏µ)", inline=False)

        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå Session ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤", url=current_link, style=discord.ButtonStyle.secondary))

        # 5. ‡πÇ‡∏û‡∏™‡∏ï‡πå Embed ‡∏™‡∏£‡∏∏‡∏õ: ‡πÉ‡∏ä‡πâ FOLLOWUP
        await interaction.followup.send(embed=embed, view=view)

        # 6. ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 'START' ‡πÄ‡∏î‡∏¥‡∏°
        if current_message_id:
            try:
                channel_obj = bot.get_channel(DASHBOARD_CHANNEL_ID)
                if channel_obj:
                    old_message = await channel_obj.fetch_message(current_message_id)
                    old_embed = old_message.embeds[0]
                    old_embed.title = "‚èπÔ∏è VS Code Live Share Session Ended"
                    old_embed.description = "Session ‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á"

                    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å (view=None)
                    await old_message.edit(embed=old_embed, view=None)
            except discord.NotFound:
                print(f"Warning: Original START message with ID {current_message_id} not found for editing.")


# --------------------------------------------------------------------------------
## Run Bot
# --------------------------------------------------------------------------------
bot.run(TOKEN)
