import discord
from discord.ext import commands
from discord import app_commands # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ app_commands ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Slash Commands
import json
import os
from dotenv import load_dotenv
import asyncio
from aiohttp import web
import hmac
import hashlib
import time

# ‡πÇ‡∏´‡∏•‡∏î Environment Variables
load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
DASHBOARD_CHANNEL_ID = int(os.getenv("DASHBOARD_CHANNEL_ID"))
GITHUB_WEBHOOK_SECRET = os.getenv("GITHUB_WEBHOOK_SECRET")

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot
intents = discord.Intents.default()
intents.message_content = True 
# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô command_prefix ‡πÄ‡∏õ‡πá‡∏ô ! ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ Slash Commands ‡πÅ‡∏ó‡∏ô
bot = commands.Bot(command_prefix="!", intents=intents)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Command Tree (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Slash Commands)
bot.tree = app_commands.CommandTree(bot)

# ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå session.json
try:
    with open("session.json", "r") as f:
        session_data = json.load(f)
except FileNotFoundError:
    session_data = {}

# -------- Webhook Helper Functions (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub Webhook) --------

def verify_signature(request_body, signature):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Ç‡∏≠‡∏á GitHub webhook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á request"""
    if not GITHUB_WEBHOOK_SECRET:
        print("ERROR: GITHUB_WEBHOOK_SECRET is not set.")
        return False
        
    mac = hmac.new(GITHUB_WEBHOOK_SECRET.encode(), msg=request_body, digestmod=hashlib.sha256)
    expected = "sha256=" + mac.hexdigest()
    return hmac.compare_digest(expected, signature)

async def update_github_embed(payload, bot_client):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Discord Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GitHub"""
    await bot_client.wait_until_ready()
    channel = bot_client.get_channel(DASHBOARD_CHANNEL_ID)
    
    if channel is None:
        print(f"ERROR: Dashboard channel with ID {DASHBOARD_CHANNEL_ID} not found.")
        return

    try:
        embed = discord.Embed(title="üì¶ GitHub Repo Status", color=0x3498db)

        repo_name = payload["repository"]["name"]
        branch = payload.get("ref", "unknown/ref").split("/")[-1] 
        last_commit = payload["head_commit"]["message"]
        author = payload["head_commit"]["author"]["name"]
        commit_url = payload["head_commit"]["url"]

        embed.add_field(name="Repo", value=repo_name, inline=False)
        embed.add_field(name="Branch", value=branch, inline=True)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Commit
        embed.add_field(name="Last Commit", value=f"[üìù {last_commit} by {author}]({commit_url})", inline=False)
        
        # Placeholders
        embed.add_field(name="PRs Open", value="üîÑ 2", inline=True)
        embed.add_field(name="Issues Open", value="‚ö†Ô∏è 3", inline=True)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Repository
        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="View Repository", url=payload["repository"]["html_url"], style=discord.ButtonStyle.link))
        
        await channel.send(embed=embed, view=view)
        print(f"Successfully sent GitHub notification for push on branch {branch}")

    except Exception as e:
        print(f"Error processing or sending GitHub embed: {e}")

# -------- Aiohttp application setup --------
webhook_app = web.Application()

async def handle_webhook(request):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà /webhook"""
    body = await request.read()
    signature = request.headers.get("X-Hub-Signature-256")
    
    if not signature or not verify_signature(body, signature):
        print("Webhook received with Invalid signature.")
        return web.Response(status=401, text="Invalid signature")

    event = request.headers.get("X-GitHub-Event")
    
    try:
        payload = json.loads(body)
    except json.JSONDecodeError:
        print("Failed to decode webhook JSON payload.")
        return web.Response(status=400, text="Invalid JSON")

    if event == "push" and payload.get("ref", "").startswith("refs/heads/"):
        # ‡∏£‡∏±‡∏ô update_github_embed ‡πÉ‡∏ô background task ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á bot instance ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        asyncio.create_task(update_github_embed(payload, bot))
        print(f"Received and scheduled push event for repo {payload['repository']['name']}")
    else:
        print(f"Received GitHub event: {event}. Ignoring.")

    return web.Response(text="OK")

# ‡∏ú‡∏π‡∏Å handler ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á /webhook
webhook_app.router.add_post("/webhook", handle_webhook)

# -------- Aiohttp Server Startup Function --------
async def start_webhook_server():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Aiohttp server ‡∏ö‡∏ô PORT ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢ environment variable"""
    port = int(os.environ.get("PORT", 5000))
    runner = web.AppRunner(webhook_app)
    await runner.setup()
    site = web.TCPSite(runner, host='0.0.0.0', port=port) 
    
    print(f"üöÄ Starting Aiohttp Webhook Server on 0.0.0.0:{port}...")
    try:
        await site.start()
    except Exception as e:
        print(f"FATAL: Failed to start web server on port {port}. Error: {e}")

# -------- Helper Function (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Commands) --------
async def send_dm_only(user, message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° DM ‡πÑ‡∏õ‡∏´‡∏≤ user ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡πÑ‡∏î‡πâ"""
    try:
        await user.send(message)
    except:
        print(f"Cannot send DM to {user}")

# -------- Events --------
@bot.event
async def on_ready():
    print(f'ü§ñ Logged in as {bot.user} (ID: {bot.user.id})')
    
    # *** ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ***
    try:
        synced = await bot.tree.sync() # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Bot ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏±‡∏ö Discord API
        print(f"‚ú® Synced {len(synced)} global command(s).")
    except Exception as e:
        print(f"‚ùå Error syncing commands: {e}")
    # **********************************************
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Webhook server ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Bot
    bot.loop.create_task(start_webhook_server())


# --- Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Options ‡∏Ç‡∏≠‡∏á /session ---
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå 'action'
class SessionAction(discord.app_commands.Choice):
    def __init__(self, name: str, value: str):
        super().__init__(name=name, value=value)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Slash Command Group
@bot.tree.command(name="session", description="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Live Share Session ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°")
@app_commands.describe(
    action="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: start, status ‡∏´‡∏£‡∏∑‡∏≠ end",
    link="‡∏•‡∏¥‡∏á‡∏Å‡πå Live Share (‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö action: start)",
)
@app_commands.choices(action=[
    SessionAction(name="‡πÄ‡∏£‡∏¥‡πà‡∏° Live Share Session", value="start"),
    SessionAction(name="‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value="status"),
    SessionAction(name="‡∏õ‡∏¥‡∏î Session ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤", value="end")
])
async def session_command(interaction: discord.Interaction, action: str, link: str = None):
    # **‡∏Ç‡πâ‡∏≠‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏ä‡πâ interaction.channel.id ‡πÅ‡∏ó‡∏ô ctx.channel.id**
    if interaction.channel_id != DASHBOARD_CHANNEL_ID:
        # ‡πÉ‡∏ä‡πâ interaction.response.send_message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö In-App Reply
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á #live-share-dashboard ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
        return

    # **‡∏Ç‡πâ‡∏≠‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏ä‡πâ interaction.response.defer() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)**
    # ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏•‡∏¢‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á defer ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ defer ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ follow up

    channel = bot.get_channel(DASHBOARD_CHANNEL_ID) # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ channel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Embed ‡∏´‡∏•‡∏±‡∏Å

    if action == "start":
        if not link:
            await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå Live Share ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ /session start", ephemeral=True)
            return
            
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        session_data["link"] = link
        # **‡∏Ç‡πâ‡∏≠‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏ä‡πâ interaction.user.display_name ‡πÅ‡∏ó‡∏ô ctx.author.display_name**
        session_data["participants"] = [interaction.user.display_name] 
        session_data["start_time"] = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
        session_data["end_time"] = None
        with open("session.json", "w") as f:
            json.dump(session_data, f)
        
        # ‡πÇ‡∏û‡∏™‡∏ï‡πå Embed
        embed = discord.Embed(title="üíª VS Code Live Share Session Started!",
                              description="Session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!",
                              color=0x3498db)
        embed.add_field(name="Session Link", value=f"[üü¶ ‡∏Å‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°]({link})", inline=False)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° Session", value=interaction.user.display_name, inline=True)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data["start_time"], inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=", ".join(session_data["participants"]), inline=False)

        # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ Embed ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
        # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Slash Command ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ Ephemeral ‡∏Å‡πà‡∏≠‡∏ô
        await interaction.response.send_message("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° Session ‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
        # ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á Embed ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (Follow up)
        await channel.send(embed=embed)
        
    elif action == "status":
        if not session_data.get("link"):
            await interaction.response.send_message("‚ö†Ô∏è ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ Live Share Session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà", ephemeral=True)
            return

        embed = discord.Embed(title="üíª VS Code Live Share Session Status",
                              description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
                              color=0xf39c12)
        embed.add_field(name="Session Link", value=f"[üü¶ ‡∏Å‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ]({session_data.get('link','-')})", inline=False)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data.get("start_time","-"), inline=True)
        embed.add_field(name="‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value="N/A", inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value=", ".join(session_data.get("participants",[])) or "(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)", inline=False)
        
        # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Embed ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        await interaction.response.send_message(embed=embed)

    elif action == "end":
        if not session_data.get("link"):
            await interaction.response.send_message("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ Live Share Session ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î", ephemeral=True)
            return
            
        end_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
        session_data["end_time"] = end_time_str
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢)
        try:
            start_t = time.mktime(time.strptime(session_data["start_time"], "%Y-%m-%d %H:%M:%S"))
            end_t = time.mktime(time.strptime(end_time_str, "%Y-%m-%d %H:%M:%S"))
            duration_sec = end_t - start_t
            hours = int(duration_sec // 3600)
            minutes = int((duration_sec % 3600) // 60)
            duration_text = f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ"
        except:
            duration_text = "-"

        embed = discord.Embed(title="üíª Live Share Session Ended",
                              description="Session ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°!",
                              color=0xe74c3c)
        embed.add_field(name="Session Link", value=f"[üü¶ ‡∏•‡∏¥‡∏á‡∏Å‡πå Session ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤]({session_data.get('link','-')})", inline=False)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", value=session_data.get("start_time","-"), inline=True)
        embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=session_data.get("end_time","-"), inline=True)
        embed.add_field(name="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", value=duration_text, inline=True)
        embed.add_field(name="‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value=", ".join(session_data.get("participants",[])) or "(‡πÑ‡∏°‡πà‡∏°‡∏µ)", inline=False)
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session
        session_data.clear()
        with open("session.json", "w") as f:
            json.dump(session_data, f)
        
        # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö Slash Command ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ Ephemeral ‡∏Å‡πà‡∏≠‡∏ô
        await interaction.response.send_message("‚úÖ ‡∏õ‡∏¥‡∏î Session ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
        # ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á Embed ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        await channel.send(embed=embed)


# -------- Run Bot --------
# bot.run(TOKEN)
# ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏à‡∏≥: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Slash Commands ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /session ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
